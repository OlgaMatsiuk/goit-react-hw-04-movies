{"version":3,"sources":["services/movies-api.js","pages/MoviesPage/MoviesPage.js"],"names":["API_KEY","BASE_URL","ApiService","url","a","fetch","response","ok","json","Promise","reject","Error","fetchPopularMovies","fetchMoviesByQuery","query","fetchMovieDetails","movieId","fetchAboutActors","fetchReviews","MoviesPage","useLocation","pathname","search","history","useHistory","useState","qs","parse","setQuery","resultSearch","setResultSearch","useEffect","moviesAPI","then","movies","results","onSubmit","event","preventDefault","trim","push","type","placeholder","autoComplete","value","onChange","currentTarget","length","map","movie","to","id","state","backUrl","title","name"],"mappings":"gVAAMA,EAAU,mCACVC,EAAW,6B,SAEFC,E,8EAAf,WAA0BC,GAA1B,eAAAC,EAAA,sEACyBC,MAAMF,GAD/B,YACQG,EADR,QAEkBC,GAFlB,gCAGYD,EAASE,OAHrB,+CAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,oF,sBAOO,SAASC,IACd,OAAOV,EAAW,GAAD,OAAID,EAAJ,uCAA2CD,IAGvD,SAASa,EAAmBC,GACjC,OAAOZ,EAAW,GAAD,OACZD,EADY,mCACuBD,EADvB,kBACwCc,IAIpD,SAASC,EAAkBC,GAChC,OAAOd,EAAW,GAAD,OAAID,EAAJ,qBAAyBe,EAAzB,oBAA4ChB,IAGxD,SAASiB,EAAiBD,GAC/B,OAAOd,EAAW,GAAD,OACZD,EADY,qBACSe,EADT,4BACoChB,IAIhD,SAASkB,EAAaF,GAC3B,OAAOd,EAAW,GAAD,OACZD,EADY,qBACSe,EADT,4BACoChB,M,gJC4CxCmB,EAvEI,WAAO,IAAD,EACvB,EAA6BC,cAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OACZC,EAAUC,cAChB,EAA0BC,oBAAS,UAAAC,IAAGC,MAAML,UAAT,eAAkBR,QAAS,IAA9D,mBAAOA,EAAP,KAAcc,EAAd,KACA,EAAwCH,mBAAS,IAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACHT,IAILU,IACsBlB,GACnBmB,MAAK,SAAAC,GAAM,OAAIJ,EAAgBI,EAAOC,YAEzCP,EAAS,OACR,CAACN,IAmBJ,OACE,qCACE,uBAAMc,SAfW,SAAAC,GACnBA,EAAMC,iBAEe,KAAjBxB,EAAMyB,QAIVhB,EAAQiB,KAAK,CACXnB,WACAC,OAAO,SAAD,OAAWR,MAMjB,UACE,uBACE2B,KAAK,OACLC,YAAY,oBACZC,aAAa,MACbC,MAAO9B,EACP+B,SAzBa,SAAAR,GACnBT,EAASS,EAAMS,cAAcF,UA0BzB,wBAAQH,KAAK,SAAb,uBAGDZ,GAAgBA,EAAakB,OAAS,GACrC,6BACGlB,EAAamB,KAAI,SAAAC,GAAK,aACrB,6BACE,cAAC,IAAD,CACEC,GAAI,CACF7B,SAAS,WAAD,OAAa4B,EAAME,IAC3BC,MAAO,CACLC,QAAShC,EACTP,MAAK,UAAEY,IAAGC,MAAML,UAAX,aAAE,EAAkBR,QAL/B,SASGmC,EAAMK,OAASL,EAAMM,QAVjBN,EAAME","file":"static/js/movies-page.f5514d65.chunk.js","sourcesContent":["const API_KEY = '669fe37c03d3daa74e87539ce9d57ec5';\r\nconst BASE_URL = 'https://api.themoviedb.org';\r\n\r\nasync function ApiService(url) {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\n\r\nexport function fetchPopularMovies() {\r\n  return ApiService(`${BASE_URL}/3/trending/all/day?api_key=${API_KEY}`);\r\n}\r\n\r\nexport function fetchMoviesByQuery(query) {\r\n  return ApiService(\r\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&query=${query}`,\r\n  );\r\n}\r\n\r\nexport function fetchMovieDetails(movieId) {\r\n  return ApiService(`${BASE_URL}/3//movie/${movieId}?api_key=${API_KEY}`);\r\n}\r\n\r\nexport function fetchAboutActors(movieId) {\r\n  return ApiService(\r\n    `${BASE_URL}/3//movie/${movieId}/credits?api_key=${API_KEY}`,\r\n  );\r\n}\r\n\r\nexport function fetchReviews(movieId) {\r\n  return ApiService(\r\n    `${BASE_URL}/3//movie/${movieId}/reviews?api_key=${API_KEY}`,\r\n  );\r\n}","import { useState, useEffect } from 'react';\r\nimport { useLocation, Link, useHistory } from 'react-router-dom';\r\nimport * as moviesAPI from '../../services/movies-api';\r\nimport qs from 'query-string';\r\n\r\nconst MoviesPage = () => {\r\n  const { pathname, search } = useLocation();\r\n  const history = useHistory();\r\n  const [query, setQuery] = useState(qs.parse(search)?.query || '');\r\n  const [resultSearch, setResultSearch] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!search) {\r\n      return;\r\n    }\r\n\r\n    moviesAPI\r\n      .fetchMoviesByQuery(query)\r\n      .then(movies => setResultSearch(movies.results));\r\n\r\n    setQuery('');\r\n  }, [search]);\r\n\r\n  const handleChange = event => {\r\n    setQuery(event.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (query.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    history.push({\r\n      pathname,\r\n      search: `query=${query}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter movie title\"\r\n          autoComplete=\"off\"\r\n          value={query}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n\r\n      {resultSearch && resultSearch.length > 0 && (\r\n        <ul>\r\n          {resultSearch.map(movie => (\r\n            <li key={movie.id}>\r\n              <Link\r\n                to={{\r\n                  pathname: `/movies/${movie.id}`,\r\n                  state: {\r\n                    backUrl: pathname,\r\n                    query: qs.parse(search)?.query,\r\n                  },\r\n                }}\r\n              >\r\n                {movie.title || movie.name}\r\n              </Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoviesPage;"],"sourceRoot":""}